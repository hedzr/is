# CHANGELOG & HISTORY

- v0.8.49
  - fix `NewColor16m` to return `*Color16m` as a `Color` object, and same action for `NewColor256`
  - fix `NewStyle` to return `*Style` as a `Color` object
  - fix `CSIAddCode`, `CSIAddCode1`, and `CSIAddCode2` to return `*CSICodes` as a `Color` object

- v0.8.47
  - added more os & arch detector such as `BSD()`

- v0.8.46
  - added history load/save machanism to `term.MakeNewTerm`
  - added new `dirs` subpackage for well-known direcoties
  - security patch

- v0.8.45
  - added `dir.RemoveExt`
  - link states mode & level, eg, set quiet level to 0 and quiet mode will also be set to false
  - others
    - meaningful func name for `functionUniqueName`
    - disable `ExampleCSICodes` on remote ci server

- v0.8.43
  - fix signal_close in windows again (sigusr1)

- v0.8.42
  - fix signal_close in windows (sigusr1)

- v0.8.41
  - security patch

- v0.8.40
  - update examples/small app; added waitforseconds app
  - added `is.SignalEnh()` with customizable `WaitForSeconds(ctx, cancel, dur, opts...)`
  - improved signal_close.go
  - improved timing subpkg, added `CalcNow()`

- v0.8.39
  - added/exposed `term.IsENOTTY(err)`
  - fixed/improved `signalS.Raise(sig)` for plan9
    - improved `basics.Raise()`, added `basics.RaiseSyscallSignal(sig)`
  - fix the usages of `syscall.Timespec` for bsd, and plan9
  - improved main cmd and build all example apps for main supported platforms and archtectures

- v0.8.38
  - add `dev-mode` into `states.Env` & `MinimalEnv`
    - `is.DevMode()`: enabled if `.devmode` file presented
    - `states.Env().SetOnDevModeChanged(cb)` to handle the changed event by `SetDevMode(b)`
  - fix `stripHtmlTags` for incorrect closetag branch

- v0.8.37
  - fix cross building
    - fix `IsSameVolume` for plan9
    - fix `timeSpecToTime` for openbsd, but plan9 needs todo
    - fix for `GetTtySizeByName`, `GetTtySizeByFile`, ...
    - fix for `syscall.ENOTTY` - for cross compiling
  - fix `stripHtmlTags`
  - fix states onchanged events trigger
  - update `build.sh`

- v0.8.35
  - BREAK for `Cursor`
    change `Up` to `UpNow`, and `CursorUp` to `Up`.
    All XXNow methods send content to console right now,
    and all XX methods put content into building buffer till Build()
    making them as result string.
  - improved `basics.Raise`
  - added `basic.Openable`
    - improved relevant codes (Catcher, cmdr)
  - added `Cursor.CursorGet()`
    via `chk.ReadTill()`
  - added `chk.ReadTill()` to wait for a char from stdin
  - move some funcs into `term/chk` subpackage, to avoid cycle import
  - added prompt example app
  - fix `isDebuggerAttached` compatibiliies for unsupported platforms

- v0.8.31
  - nothing, just a stable release

- v0.8.30
  - improved godoc for `color` pkg
  - fix version number
  - fix small app

- v0.8.29
  - improved `is/basic`.Signals.Catcher
    - **BREAK** - passing ctx now
    - **BREAK** - remove deprecated codes specially including `Wait()`
    - update test codes
    - update example apps
    - update `hedzr/cmdr-docs-dev` for all relevant demo codes
    - update all relevant projects, include `cmdr`, `cmdr.loaders`, ...
  - improved `is/term/color`
    - `*Cursor.CursorUp()` and similar funcs are now compliant with windows
    - split `Translator` codes to sep files

- v0.8.28
  - improved `is/term/color`
    - fix/improved color256,color16,color16m
    - added `NewSGR()`
    - added `CSIAddCode()`, `CSIAddCode1()`, `CSIAddCode2()`
    - added `NewStyle()`, `NewControlCode()`, `NewFeCode()`
    - added `Color256table` for testing
    - `fmtbufS`
      - added `CWriter` and `FmtBuf` interfaces for `fmtbufS`
      - improved.
  - cleanup `is/term/color`

- v0.8.27
  - add `colors.go` to `is/term/color`
    - change `color.Color` from `int` to `interface{...}`
    - add `NewColor16`, `NewColor256`, `NewColor16m` to build a `color.Color` object.
    - added `fmtbufS` to make memory usage more effective
  - fix `is/term/color`
    - fix `color.New().....Build()` can't auto-close ansi-esc-code as well

- v0.8.26
  - `is/term` - added `MakeRawWrapped`, `MakeNewTerm`

- v0.8.25
  - improved `term/color` subpackage
    - support 16-colors and 256/16m-colors
    - support csi codes - `colors.New().CSI()`
    - support control code (wip)
    - `Cursor` - for building colorful text and sending cursor operations
      - added new `func New() *Cursor` for streaming calls to build colorful text
      - full ansi escape sequences support
      - main console cursor operations support
    - `RowsBlock` - for printing in a psuedo tui environ
      RowsBlock makes a full-rows display area for several rows,
      you could print to these rows by moving cursor to up, down, or top.
  - improved for more platforms - building tested for these ARCHes matrix
    - darwin, linux, windows, bsd,
    - amd64, arm64, riscv64, mips64,
    - added `isDebuggerAttached` for bsd
  - added `RemovcOnDebugChanged()` and more
  - updated and added more _examples
  - added top-level packge doc (is.go)
  - improved `GetTtySize`

- v0.7.23
  - add `StdoutStat`, `StdoutPiped` & `StdoutRedirected`, ...
  - add `WithWriter` to `exec.New()...`
  - improved `is.ColorfulTty`

- v0.7.22
  - fix `RelName()` for a same two input should return "."
  - add `WithEnvMap` to `exec.New()...`

- v0.7.21
  - security patch

- v0.7.20
  - fix `normalizeDirBasic` - for rel-parent-dir (`../`)

- v0.7.19
  - add `OnChange` handlers to states, such as `is.SetOnDebugChanged()` for debug mode or level changed event raised
  - improved `color.Translator` interface to add more methods

- v0.7.18
  - fix `is.DebuggerAttached()` under darwin
  - improved and remove deprecated oper to `ioutil` package
  - doc `dir.Exists`

- v0.7.16
  - security patch

- v0.7.15
  - remove deprecated ref (/x/term)

- v0.7.13
  - security patch

- v0.7.11
  - security patch

- v0.7.10
  - fix unnecessary err if `forFileMaxR()` stopped

- v0.7.9
  - fix ref error in dir/ subpackage
  - fix tests in dir/

- v0.7.8 (failed)
  - improved doc of `Catch()`
  - added `PressEnterToContinue`, `PressAnyKeyToContinue`
  - added `UnescapeUnicode`, `UnescapeUnicodeInYamlDoc` to stringtool/
  - added timing/ subpackage
  - mv `cmdr/v2/pkg/dir` to `is/dir`

- v0.7.7
  - downgrade to go1.23 instead of 1.23.7
  - improved `RunCommandFull` to add more info if failed
  - improve doc for `Signals().Catcher()`
  - fix/improve doc for `Signals().Catcher()`

- v0.7.6
  - improved `SplitCommandString()`

- v0.7.5
  - fix version number

- v0.7.3
  - add `Signals.WithOnLoopFunc & WaitFor(onLoopFunc)`, old `WithOnLoop & Wait` are deprecated from now on
  - improved `SplitCommandString` and its doc

- v0.7.1
  - fix `Call`/`CallQuiet` for better splitting cmdline to array
  - fix `Call` if fn is nil
  - improved test for `SplitCommandString()`

- v0.7.0
  - upgrade minimal toolchain to go1.23.7
  - security patch

- v0.6.13
  - fix getTtySize in darwin (some exception cases such as goland new run/debug console tab)
  - security patch

- v0.6.10
  - security patch

- v0.6.9
  - security patch

- v0.6.8
  - security patch

- v0.6.7
  - fix `ToBool`

- v0.6.6
  - security patch

- v0.6.5
  - security patch

- v0.6.3
  - security patch

- v0.6.2
  - added `is.InBenchmark`
  - added Performance Note for `is.InDebugging`

- v0.6.1
  - security patch

- v0.6.0
  - [BREAK] `is.InDebugging()` checks if the parent process is 'dlv' now.
    - To detect 'isdevel' mode, use `DebugBuild()`
  - added a lite `exec` subpackage.
  - fix `InTesting` on windows and others.

- v0.5.29
  - security patch
  - add full-platforms testing and building helpers
  - fix building on windows

- v0.5.27
  - security patch
  - add more detectors such as is.Root(), is.Windows(), is.Bash(), ...

- v0.5.26
  - security patch

- v0.5.25
  - security patch
  - change to go toolchain 1.22.7

- v0.5.23
  - security patch

- v0.5.22
  - security patch

- v0.5.21
  - security patch

- v0.5.20
  - security patch
  - added an indexer to retrieve the functions in term/color subpackages

- v0.5.19
  - security patch

- v0.5.18
  - added cases converting tools - to snake-case, kebab-case, camel-case, and to golang exported name

- v0.5.17
  - fixed go.mod sync state

- v0.5.16
  - security patch - upgrade google deps

- v0.5.15
  - security patch - upgrade google deps

- v0.5.13
  - fixed wait-group count in catcher.Wait()
  - review the implements of Catcher
  - improved shadowed 'c' to 'cc'
  - updated example app, and README.md

- v0.5.11
  - added `Detected(stateName) bool` and State(stateName) bool`

- v0.5.10
  - improved tests, fixed missing package
  - improved go docs
  - updated example app, and README.md

- v0.5.7
  - fixed tool.go and tests

- v0.5.9
  - added `buildtags.IsBuildTagExists(tag) bool`
  - updated term package
  - added ToBool, StringToBool
  - fixed test cases

- v0.5.7
  - fixed tool.go and tests
  - fixed missing ctx
  - added basics package

- v0.5.5
  - fix code indents in readme
  - security updates
  - add '<dim>dim text</dim>'
  - update color.Translator interface
  - fix GetTtySize for darwin

- v0.5.1
  - fix tty function signatures
  - fix git action script

- v0.5.0
  - initial release
