# This code is licensed under the terms of the MIT license.

## Golden config for golangci-lint v1.50.1
#
# This is the best config for golangci-lint based on my experience and opinion.
# It is very strict, but not extremely strict.
# Feel free to adopt and change it for your needs.


# This file contains only configs which differ from defaults.
# All possible options can be found here https://github.com/golangci/golangci-lint/blob/master/.golangci.reference.yml

# https://fossies.org/linux/istio/common/config/.golangci.yml
# https://github.com/golangci/golangci-lint/blob/master/.golangci.yml
# https://olegk.dev/go-linters-configuration-the-right-version

# WARNING: DO NOT EDIT, THIS FILE IS PROBABLY A COPY
#
# The original version of this file is located in the https://github.com/istio/common-files repo.
# If you're looking at this file in a different repo and want to make a change, please go to the
# common-files repo, make the change there and check it in. Then come back to this repo and run
# "make update-common".

service:
  # When updating this, also update the version stored in docker/build-tools/Dockerfile in the istio/tools repo.
  golangci-lint-version: 1.54.x # use the fixed version to not introduce new linters unexpectedly

run:
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  deadline: 20m
  build-tags:
    - integ
    - integfuzz
    - integration
  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  # from this option's value:
  #     vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs:
    - genfiles$
    - vendor$
    - ref
    - playground
    - fixtures
    - testdata
  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  skip-files:
    - ".*\\.pb\\.go"
    - ".*\\.gen\\.go"
    - ".*\\_string\\.go"
  # issues-exit-code: 1
  # skip-dirs-use-default: false
  # go: '1.19'

output:
  # I prefer the simplest one: `line-number` and saving to `lint.txt`
  #
  # The `tab` also looks good and with the next release I will switch to it
  # (ref: https://github.com/golangci/golangci-lint/issues/3728)
  #
  # There are more formats which can be used on CI or by your IDE.
  format: line-number:lint.txt

  # I do not find this useful, parameter above already enables filepath
  # with a line and column. For me, it's easier to follow the path and
  # see the line in an IDE where I see more code and understand it better.
  print-issued-lines: false

  # Must have. Easier to understand the output.
  print-linter-name: true

  # No, no skips, everything should be reported.
  uniq-by-line: false

  # To be honest no idea when this can be needed, maybe a multi-module setup?
  path-prefix: ""

  # Slightly easier to follow the results + getting deterministic output.
  sort-results: true

linters:
  disable-all: true
  enable:
    - errcheck
    - exportloopref
    - depguard
    - gocritic
    - gofumpt
    - goimports
    - revive
    - gosimple
    - govet
    - ineffassign
    - lll
    - misspell
    - staticcheck
    - stylecheck
    - typecheck
    - unconvert
    - unparam
    - unused
    - gci
    - gosec
  fast: false

linters-settings:

  depguard:
    # new configuration
    rules:
      logger:
        deny:
          # logging is allowed only by logutils.Log,
          # logrus is allowed to use only in logutils package.
          - pkg: "github.com/sirupsen/logrus"
            desc: logging is allowed only by logutils.Log
      DenyGogoProtobuf:
        files:
          - $all
        deny:
          - pkg: github.com/gogo/protobuf
            desc: "gogo/protobuf is deprecated, use golang/protobuf"
      # deny for all go files
      AllGoFiles:
        files:
          - $all
        deny:
          - pkg: golang.org/x/net/http2/h2c
            desc: "h2c.NewHandler is unsafe; use wrapper istio.io/istio/pkg/h2c"
          - pkg: github.com/golang/protobuf
            desc: 'use "google.golang.org/protobuf"'
          - pkg: github.com/golang/protobuf/jsonpb
            desc: "don't use the jsonpb package directly; use util/protomarshal instead"
          - pkg: google.golang.org/protobuf/encoding/protojson
            desc: "don't use the protojson package directly; use util/protomarshal instead"
          - pkg: gomodules.xyz/jsonpatch/v3
            desc: "don't use v3; v2 is orders of magnitude higher performance"
          - pkg: k8s.io/apimachinery/pkg/util/sets
            desc: "use istio.io/istio/pkg/sets"
          - pkg: k8s.io/utils/env
            desc: "use istio.io/istio/pkg/env"
          - pkg: k8s.io/utils/strings/slices
            desc: "use istio.io/istio/pkg/slices"
          - pkg: k8s.io/utils/pointer
            desc: "use istio.io/istio/pkg/ptr"
          - pkg: go.opencensus.io
            desc: "do not use OpenCensus; use OpenTelemetry instead"
          - pkg: github.com/siddontang/go-log/log
            desc: 'use "github.com/sirupsen/logrus" instead'
          - pkg: github.com/siddontang/go/log
            desc: 'use "github.com/sirupsen/logrus" instead'
          - pkg: go.uber.org/atomic
            desc: 'use "sync/atomic" instead'
          - pkg: io/ioutil
            desc: 'use "io" or "os" packages instead'
      DenyOperatorAndIstioctl:
        files:
          # Tests can do anything
          - "!$test"
          # Main code should only be used by appropriate binaries
          - "!**/operator/**"
          - "!**/istioctl/**"
          - "!**/tools/bug-report/**"
          # This should only really import operator API, but that is hard to express without a larger refactoring
          - "!**/pkg/kube/**"
          - "!**/pkg/url/**"
          - "!**/pkg/test/framework/**"
          - "!**/tests/fuzz/**"
        deny:
          - pkg: istio.io/istio/operator
            desc: "operator should not be imported"
          - pkg: istio.io/istio/istioctl
            desc: "istioctl should not be imported"
      DenyOpenTelemetry:
        files:
          - $all
          - "!**/pkg/monitoring/**"
          - "!**/pkg/tracing/**"
        deny:
          - pkg: go.opentelemetry.io/otel
            desc: "do not use OpenTelemetry directly; use pkg/monitoring"
          - pkg: go.opentelemetry.io/otel/metric
            desc: "do not use OpenTelemetry directly; use pkg/monitoring"
  dupl:
    threshold: 200
  dupword: # checks for duplicate words in the source code [fast: true, auto-fix: true]
    # auto-fix: false
    # Keywords for detecting duplicate words.
    # If this list is not empty, only the words defined in this list will be detected.
    # Default: []
    keywords:
      - "the"
      - "and"
      - "a"
    # Keywords used to ignore detection.
    # Default: []
    ignore:
      - "0C0C"
  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: true # Deafult: flse
    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: false
    # Function to skip.
    exclude-functions:
      - io/ioutil.ReadFile
      - io.Copy(*bytes.Buffer)
      - io.Copy(os.Stdout)
  funlen:
    # lines: -1 # the number of lines (code + empty lines) is not a right metric and leads to code without empty line or one-liner.
    lines: 100
    statements: 50

  gci:
    sections:
      - standard # Captures all standard packages if they do not match another section.
      - default # Contains all imports that could not be matched to another section type.
      - prefix(github.com/hedzr/) # Groups all imports with the specified Prefix.
      - prefix(istio.io/) # Groups all imports with the specified Prefix.
      - prefix(golang.org/)
      # - prefix(github.com/gravitational/teleport) # Custom section: groups all imports with the specified Prefix.
    skip-generated: true # Skip generated files.
    custom-order: true # Required for "sections" to take effect.

  goconst:
    min-len: 2
    min-occurrences: 3
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      # These 3 will detect many cases, but they do sense
      # if it's performance oriented code
      - hugeParam
      - rangeExprCopy
      - rangeValCopy
      - commentedOutCode
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - ifElseChain
      - octalLiteral
      - whyNoLint
    enabled-checks: [ ]
      # Already Enabled:
      # - appendCombine
      # - argOrder
      # - assignOp
      # - badCond
      # - boolExprSimplify
      # - builtinShadow
      # - captLocal
      # - caseOrder
      # - codegenComment
      # - commentedOutCode
      # - commentedOutImport
      # - defaultCaseOrder
      # - deprecatedComment
      # - docStub
      # - dupArg
      # - dupBranchBody
      # - dupCase
      # - dupSubExpr
      # - elseif
      # - emptyFallthrough
      # - equalFold
      # - flagDeref
      # - flagName
      # - hexLiteral
      # - indexAlloc
      # - initClause
      # - methodExprCall
      # - nilValReturn
      # - octalLiteral
      # - offBy1
      # - rangeExprCopy
      # - regexpMust
      # - sloppyLen
      # - stringXbytes
      # - switchTrue
      # - typeAssertChain
      # - typeSwitchVar
      # - typeUnparen
      # - underef
      # - unlambda
      # - unnecessaryBlock
      # - unslice
      # - valSwap
      # - weakCond
      # Unused
      # - yodaStyleExpr
      # - appendAssign
      # - commentFormatting
      # - emptyStringTest
      # - exitAfterDefer
      # - ifElseChain
      # - hugeParam
      # - importShadow
      # - nestingReduce
      # - paramTypeCombine
      # - ptrToRefParam
      # - rangeValCopy
      # - singleCaseSwitch
      # - sloppyReassign
      # - unlabelStmt
    # - unnamedResult
    # - wrapperFunc
  gocyclo:
    min-complexity: 25
  godot: # Check if comments end in a period [fast: true, auto-fix: true]
    # auto-fix: true
    # Comments to be checked: `declarations`, `toplevel`, or `all`.
    # Default: declarations
    scope: toplevel
    # List of regexps for excluding particular comment lines from check.
    # Default: []
    exclude:
      # Exclude todo and fixme comments.
      - "^fixme:"
      - "^todo:"
    # Check that each sentence ends with a period.
    # Default: true
    period: false
    # Check that each sentence starts with a capital letter.
    # Default: false
    # capital: true

  gofmt:
    # auto-fix: true
    rewrite-rules:
      - pattern: 'interface{}'
        replacement: 'any'
  gofumpt:
    # Deprecated: use the global `run.go` instead.
    lang-version: "1.17"
    # Module path which contains the source code being formatted.
    # Default: ""
    module-path: github.com/org/project
    # Choose whether to use the extra rules.
    # Default: false
    extra-rules: true
    # auto-fix: true
  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
    local-prefixes: istio.io/
    # local-prefixes: github.com/golangci/golangci-lint
    # auto-fix: true
  golint:
    min-confidence: 0
  gomnd:
    # don't include the "operation" and "assign"
    checks:
      - argument
      - case
      - condition
      - return
    ignored-numbers:
      - '0'
      - '1'
      - '2'
      - '3'
    ignored-functions:
      - strings.SplitN
  gosec:
    includes:
      - G401
      - G402
      - G404
  govet:
    # report about shadowed variables
    check-shadowing: false
    # check-shadowing: true
    # fast: true
    disable:
      - fieldalignment # I'm ok to waste some bytes
    settings:
      printf:
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
          - (github.com/hedzr/store).assertTrue
          - (github.com/hedzr/store).assertFalse

  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 160
    # tab width in spaces. Default to 1.
    tab-width: 1
  maligned:
    # print struct with more effective memory layout or not, false by default
    suggest-new: true
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US
    # fast: true
    # auto-fix: false
    ignore-words:
      - cancelled
      - hedzr
  nolintlint:
    allow-unused: true # Enabled because of conditional builds / build tags.
    require-explanation: true
    require-specific: true
    # allow-unused: false # report any unused nolint directives
    # require-explanation: false # don't require an explanation for nolint directives
    # require-specific: false # don't require nolint directives to be specific about which linter is being skipped

  revive: # see: https://golangci-lint.run/usage/linters/#revive
    # Maximum number of open files at the same time.
    # See https://github.com/mgechev/revive#command-line-flags
    # Defaults to unlimited.
    max-open-files: 2048
    # When set to false, ignores files with "GENERATED" header, similar to golint.
    # See https://github.com/mgechev/revive#available-rules for details.
    # Default: false
    ignore-generated-header: true
    # Sets the default severity.
    # See https://github.com/mgechev/revive#configuration
    # Default: warning
    severity: warning # error
    # Enable all available rules.
    # Default: false
    enable-all-rules: true
    # Sets the default failure confidence.
    # This means that linting errors with less than 0.8 confidence will be ignored.
    # Default: 0.8
    confidence: 0.1
    rules:
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#add-constant
      - name: add-constant
        severity: warning
        disabled: false
        arguments:
          - maxLitCount: "3"
            allowStrs: '""'
            allowInts: "0,1,2"
            allowFloats: "0.0,0.,1.0,1.,2.0,2."
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#argument-limit
      - name: argument-limit
        severity: warning
        disabled: false
        arguments: [ 4 ]
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#atomic
      - name: atomic
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#bare-return
      - name: bare-return
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#blank-imports
      - name: blank-imports
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#bool-literal-in-expr
      - name: bool-literal-in-expr
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#call-to-gc
      - name: call-to-gc
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#constant-logical-expr
      - name: constant-logical-expr
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#context-as-argument
      - name: context-as-argument
        severity: warning
        disabled: false
        arguments:
          - allowTypesBefore: "*testing.T,*github.com/user/repo/testing.Harness"
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#context-keys-type
      - name: context-keys-type
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#defer
      - name: defer
        severity: warning
        disabled: false
        arguments:
          - [ "call-chain", "loop" ]
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#dot-imports
      - name: dot-imports
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#duplicated-imports
      - name: duplicated-imports
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#error-naming
      - name: error-naming
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#error-return
      - name: error-return
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#error-strings
      - name: error-strings
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#errorf
      - name: errorf
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#exported
      - name: exported
        severity: warning
        disabled: false
        arguments:
          - "preserveScope"
          - "checkPrivateReceivers"
          - "sayRepetitiveInsteadOfStutters"
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#identical-branches
      - name: identical-branches
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#if-return
      - name: if-return
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#increment-decrement
      - name: increment-decrement
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#indent-error-flow
      - name: indent-error-flow
        severity: warning
        disabled: false
        arguments:
          - "preserveScope"
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#import-alias-naming
      - name: import-alias-naming
        severity: warning
        disabled: false
        arguments:
          - "^[a-z][a-z0-9]{0,}$"
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#imports-blacklist
      - name: imports-blacklist
        severity: warning
        disabled: false
        arguments:
          - "crypto/md5"
          - "crypto/sha1"
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#import-shadowing
      - name: import-shadowing
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#modifies-parameter
      - name: modifies-parameter
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#package-comments
      - name: package-comments
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#range
      - name: range
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#range-val-in-closure
      - name: range-val-in-closure
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#range-val-address
      - name: range-val-address
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#receiver-naming
      - name: receiver-naming
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#redefines-builtin-id
      - name: redefines-builtin-id
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#string-of-int
      - name: string-of-int
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#string-format
      - name: string-format
        severity: warning
        disabled: false
        arguments:
          - - 'core.WriteError[1].Message'
            - '/^([^A-Z]|$)/'
            - must not start with a capital letter
          - - 'fmt.Errorf[0]'
            - '/(^|[^\.!?])$/'
            - must not end in punctuation
          - - panic
            - '/^[^\n]*$/'
            - must not contain line breaks
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#struct-tag
      - name: struct-tag
        arguments:
          - "json,inline"
          - "bson,outline,gnu"
        severity: warning
        disabled: false

      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#superfluous-else
      - name: superfluous-else
        severity: warning
        disabled: false
        arguments:
          - "preserveScope"
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#time-equal
      - name: time-equal
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#time-naming
      - name: time-naming
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#var-naming
      - name: var-naming
        severity: warning
        disabled: false
        arguments:
          - [ "ID" ] # AllowList
          - [ "VM" ] # DenyList
          - - upperCaseConst: true
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#var-declaration
      - name: var-declaration
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unconditional-recursion
      - name: unconditional-recursion
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unexported-naming
      - name: unexported-naming
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unexported-return
      - name: unexported-return
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unhandled-error
      - name: unhandled-error
        severity: warning
        disabled: false
        arguments:
          - "fmt.Printf"
          - "myFunction"
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unreachable-code
      - name: unreachable-code
        severity: warning
        disabled: false
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unused-parameter
      - name: unused-parameter
        severity: warning
        disabled: false
        arguments:
          - allowRegex: "^_"
      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#waitgroup-by-value
      - name: waitgroup-by-value
        severity: warning
        disabled: false

        # the following rules can be enabled in the future
        # - name: empty-lines
        # - name: confusing-results
        # - name: empty-block
        # - name: get-return
        # - name: confusing-naming
        # - name: unexported-naming
        # - name: early-return
        # - name: unused-parameter
        # - name: unnecessary-stmt
        # - name: deep-exit
        # - name: import-shadowing
        # - name: modifies-value-receiver
        # - name: unused-receiver
        # - name: bare-return
        # - name: flag-parameter
        # - name: unhandled-error
        # - name: if-return
      - name: unexported-return
        disabled: true
      - name: unused-parameter

  tagalign: # check that struct tags are well aligned [fast: true, auto-fix: true]
    # auto-fix: true

    # Align and sort can be used together or separately.
    #
    # Whether enable align. If true, the struct tags will be aligned.
    # eg:
    # type FooBar struct {
    #     Bar    string `json:"bar" validate:"required"`
    #     FooFoo int8   `json:"foo_foo" validate:"required"`
    # }
    # will be formatted to:
    # type FooBar struct {
    #     Bar    string `json:"bar"     validate:"required"`
    #     FooFoo int8   `json:"foo_foo" validate:"required"`
    # }
    # Default: true.
    # align: false

    # Whether enable tags sort.
    # If true, the tags will be sorted by name in ascending order.
    # eg: `xml:"bar" json:"bar" validate:"required"` -> `json:"bar" validate:"required" xml:"bar"`
    # Default: true
    # sort: false

    # Specify the order of tags, the other tags will be sorted by name.
    # This option will be ignored if `sort` is false.
    # Default: []
    order:
      - deep
      - logg
      - store
      - json
      - yaml
      - yml
      - toml
      - mapstructure
      - binding
      - validate
    # Whether enable strict style.
    # In this style, the tags will be sorted and aligned in the dictionary order,
    # and the tags with the same name will be aligned together.
    # Note: This option will be ignored if 'align' or 'sort' is false.
    # Default: false
    strict: true

  tagliatelle:
    case:
      rules:
        json: snake # kebab? why it's not a `snake` by default?!
        yaml: kebab # snake? why it's not a `snake` by default?!
        xml: camel
        bson: camel
        avro: snake
        mapstructure: kebab

  unparam:
    # call graph construction algorithm (cha, rta). In general, use cha for libraries,
    # and rta for programs with main packages. Default is cha.
    # algo: cha
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false

  unused:
    # treat code as a program (not a library) and report unused exported identifiers; default is false.
    # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    # check-exported: false

    # Mark all struct fields that have been written to as used.
    # Default: true
    field-writes-are-uses: true

    # Treat IncDec statement (e.g. `i++` or `i--`) as both read and write operation instead of just write.
    # Default: false
    post-statements-are-reads: false

    # Mark all exported identifiers as used.
    # Default: true
    # exported-is-used: false

    # Mark all exported fields as used.
    # default: true
    # exported-fields-are-used: false

    # Mark all function parameters as used.
    # default: true
    # parameters-are-used: false

    # Mark all local variables as used.
    # default: true
    # local-variables-are-used: false

    # Mark all identifiers inside generated files as used.
    # Default: true
    # generated-is-used: false

  whitespace:
    # Enforces newlines (or comments) after every multi-line if statement.
    # Default: false
    multi-if: false
    # Enforces newlines (or comments) after every multi-line function signature.
    # Default: false
    multi-func: false
    # auto-fix: true

issues:
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  exclude:
    - composite literal uses unkeyed fields
  exclude-rules:
    # Exclude some linters from running on test files.
    - path: _test\.go$|^tests/|^samples/
      linters:
        - errcheck
        - maligned
        - gomnd

    - path: pkg/golinters/errcheck.go
      text: "SA1019: errCfg.Exclude is deprecated: use ExcludeFunctions instead"
    - path: pkg/commands/run.go
      text: "SA1019: lsc.Errcheck.Exclude is deprecated: use ExcludeFunctions instead"
    - path: pkg/commands/run.go
      text: "SA1019: e.cfg.Run.Deadline is deprecated: Deadline exists for historical compatibility and should not be used."

    - path: pkg/golinters/gofumpt.go
      text: "SA1019: settings.LangVersion is deprecated: use the global `run.go` instead."
    - path: pkg/golinters/staticcheck_common.go
      text: "SA1019: settings.GoVersion is deprecated: use the global `run.go` instead."
    - path: pkg/lint/lintersdb/manager.go
      text: "SA1019: (.+).(GoVersion|LangVersion) is deprecated: use the global `run.go` instead."
    - path: pkg/golinters/unused.go
      text: "rangeValCopy: each iteration copies 160 bytes \\(consider pointers or indexing\\)"
    - path: test/(fix|linters)_test.go
      text: "string `gocritic.go` has 3 occurrences, make it a constant"

    # We need to use the deprecated module since the jsonpb replacement is not backwards compatible.
    - linters:
        - staticcheck
      text: "SA1019: package github.com/golang/protobuf/jsonpb"
    - linters:
        - staticcheck
      text: 'SA1019: "github.com/golang/protobuf/jsonpb"'
  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: true
  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-per-linter: 0
  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0
